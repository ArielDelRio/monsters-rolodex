{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","id","alt","monster","name","email","CardList","monsters","map","index","key","App","state","searchText","this","filteredMonsters","filter","toLowerCase","includes","e","setState","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAGaA,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACAC,UAAY,SACZC,KAAO,SACPH,YAAeA,EACfI,SAAYH,MCLHI,G,YAAO,SAAAC,GAAK,OACrB,yBAAKJ,UAAU,kBACX,yBAAKK,IAAG,+BAA0BD,EAAME,GAAhC,0BAA8DC,IAAI,YAC1E,4BAAKH,EAAMI,QAAQC,MACnB,2BAAIL,EAAMI,QAAQE,UCHbC,EAAW,SAAAP,GAAK,OACzB,yBAAKJ,UAAU,aACVI,EAAMQ,SAASC,KAAI,SAACL,EAASM,GAAV,OAChB,yBAAKC,IAAKD,GACN,kBAAC,EAAD,CAAMN,QAASA,EAASF,GAAIQ,UCHtCF,EAAW,CACf,CACEH,KAAM,QACNC,MAAO,mBACP,CACAD,KAAM,OACNC,MAAO,kBACP,CACAD,KAAM,OACNC,MAAO,kBACP,CACAD,KAAM,SACNC,MAAO,oBACP,CACAD,KAAM,SACNC,MAAO,oBACP,CACAD,KAAM,WACNC,MAAO,sBACP,CACAD,KAAM,UACNC,MAAO,qBACP,CACAD,KAAM,QACNC,MAAO,mBACP,CACAD,KAAM,OACNC,MAAO,mBA8BIM,E,kDAzBb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXL,SAAUA,EACVM,WAAY,IAJH,E,qDAQJ,IAAD,SACyBC,KAAKF,MAA7BL,EADD,EACCA,SAAUM,EADX,EACWA,WACXE,EAAmBR,EAASS,QAAO,SAAAb,GACvC,OAAOA,EAAQC,KAAKa,cAAcC,SAASL,EAAWI,kBAGxD,OACE,yBAAKtB,UAAU,OACb,+CACA,kBAAC,EAAD,CAAWF,YAAY,mBAAmBC,aAAc,SAAAyB,GAAC,OAAI,EAAKC,SAAS,CAACP,WAAYM,EAAEE,OAAOC,WACjG,kBAAC,EAAD,CAAUf,SAAUQ,S,GAnBVQ,aCxBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a20b676c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className = \"search\"\r\n    type = \"search\"\r\n    placeholder = {placeholder}\r\n    onChange = {handleChange}\r\n    />\r\n)\r\n","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.id  }?set=set2&size=180x200`} alt=\"monster\"/>\r\n        <h3>{props.monster.name}</h3>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.monsters.map((monster, index) => (\r\n            <div key={index}>\r\n                <Card monster={monster} id={index}/>\r\n            </div>\r\n        ))}\r\n    </div>\r\n);\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport {CardList} from './components/card-list/card-list.component';\n\nconst monsters = [\n  {\n    name: 'Ariel',\n    email: 'ariel@gmail.com'\n  },{\n    name: 'Tato',\n    email: 'tato@gmail.com'\n  },{\n    name: 'Yero',\n    email: 'yero@gmail.com'\n  },{\n    name: 'Arnold',\n    email: 'arnold@gmail.com'\n  },{\n    name: 'Marlon',\n    email: 'marlon@gmail.com'\n  },{\n    name: 'Gilberto',\n    email: 'gilberto@gmail.com'\n  },{\n    name: 'Osvaldo',\n    email: 'osvaldo@gmail.com'\n  },{\n    name: 'Yacel',\n    email: 'yacel@gmail.com'\n  },{\n    name: 'Raul',\n    email: 'raul@gmail.com'\n  }\n]\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: monsters,\n      searchText: '',\n    }\n  }\n\n  render(){\n    const {monsters, searchText} = this.state;\n    const filteredMonsters = monsters.filter(monster=>{\n      return monster.name.toLowerCase().includes(searchText.toLowerCase());\n  });\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder='Search monster..' handleChange={e => this.setState({searchText: e.target.value})}/>\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}